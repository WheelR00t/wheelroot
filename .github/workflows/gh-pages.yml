# Nom du Workflow affiché sur GitHub Actionss
name: Deploy Hugo site to Pages

# Déclencheurs : quand exécuter ce workflow
on:
  # Sur chaque push vers la branche 'main'
  push:
    branches:
      - main
  # Permet aussi de le lancer manuellement depuis l'onglet Actions
  workflow_dispatch:

# Permissions nécessaires pour que l'action puisse déployer sur GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Configuration pour éviter les exécutions multiples en parallèle
# Annule les anciens déploiements si un nouveau push arrive vite
concurrency:
  group: "pages"
  cancel-in-progress: true

# Définit les tâches à exécuter
jobs:
  # Première tâche : Construire le site Hugo
  build:
    runs-on: ubuntu-latest # Utilise une machine virtuelle Linux récente
    env:
      # Spécifie la version d'Hugo à utiliser. METS À JOUR si besoin.
      # Assure-toi que c'est une version "Extended" (pour les thèmes comme LoveIt)
      HUGO_VERSION: 0.119.0

    steps:
      # Étape 1: Récupérer le code de ton dépôt
      - name: Checkout repository code
        uses: actions/checkout@v4 # Utilise la version 4 de l'action checkout
        with:
          # TRES IMPORTANT: Récupère aussi les sous-modules Git (ton thème LoveIt)
          submodules: recursive
          # Récupère tout l'historique Git (peut être utile pour certaines fonctions Hugo)
          fetch-depth: 0

      # Étape 2: Installer Hugo (la bonne version)
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2 # Action populaire pour installer Hugo
        with:
          hugo-version: '${{ env.HUGO_VERSION }}'
          # TRES IMPORTANT: Installe la version "Extended" d'Hugo (pour Sass/SCSS utilisé par certains thèmes)
          extended: true

      # Étape 3: Préparer l'environnement pour GitHub Pages
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4 # Version 4 de l'action de configuration

      # Étape 4: Construire le site statique avec Hugo
      - name: Build Hugo site
        env:
          # Force Hugo à utiliser le mode production (optimisations, etc.)
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
          # Construit le site en utilisant l'URL de base fournie par l'étape "Setup Pages"
          # Cela gère automatiquement l'URL *.github.io/repo OU ton domaine personnalisé
        run: hugo --minify --baseURL "${{ steps.pages.outputs.base_url }}/"

      # Étape 5: Préparer les fichiers générés pour le déploiement sur Pages
      - name: Upload artifact for Pages deployment
        # Action spécifique pour GitHub Pages artifact
        # *** UTILISE LA VERSION v3 *** car v4 n'existe pas pour cette action spécifique (erreur précédente)
        uses: actions/upload-pages-artifact@v3
        with:
          # Chemin vers le dossier où Hugo a généré le site (par défaut 'public')
          path: ./public

  # Deuxième tâche : Déployer le site sur GitHub Pages
  deploy:
    # Définit l'environnement de déploiement (pour les règles de sécurité/secrets si besoin)
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # Récupère l'URL du site déployé
    runs-on: ubuntu-latest # Utilise une machine Linux
    needs: build # Ne s'exécute QUE si la tâche 'build' a réussi
    steps:
      # Étape unique: Déployer les fichiers préparés à l'étape précédente
      - name: Deploy to GitHub Pages
        id: deployment
        # Action officielle pour le déploiement sur Pages
        uses: actions/deploy-pages@v4 # Utilise la version 4 de cette action
